options:
	discordBotToken: "CONFIGURE-THIS" # DISCORD BOT TOKEN
	SuggestionsChannel: CONFIGURE-THIS # WHERE SUGGESTIONS WILL GO
	AdminRole: CONFIGURE-THIS # GENERAL ADMINSTRATION ROLE (role required to post the suggestions panel)
	SuggestionsEmbedTitle: "Suggestions"
	SuggestionsEmbedDescription: "Want to help improve the server? This panel allows you to suggest something for our developers, admins, and owners to look over to possibly add in a future update to the server!%nl%%nl%Click below to create a suggestion!"
	SuggestionsEmbedFooter: "Suggestions Bot by Dank JosBot#1001"

define new bot named "SuggestionsBot": 
    
    # The bot's token, small reminder that it MUST be private!
	token: {@discordBotToken}
    
    # Gateway intents enabled, others that are not listed here will be disabled.
    # If you're not sure about that, leave it as 'default intents'.
	intents: default intents
    
    # Advanced bot option, defining websocket, connection and privacy parameters.
    # Here again, if you're not sure about that, leave it as shown below.
	policy: all
	auto reconnect: true
	compression: none
    
    # Optional section code:
    # Fired once the bot, and all guilds, are ready-to-use.
	on ready:
		send "&7Suggestions Bot is ready!" to console
    # Fired once a guild, and all its members, are ready-to-use
	on guild ready:
		send "&7Suggestions Bot is ready for guild use!" to console


discord command !suggestions-panel:
	trigger:
		event-bot is bot "SuggestionsBot"
		if event-member has discord role with id "{@AdminRole}":
			create a new message and store it in {_msg}:

				make new component row and store it in {_row}:
					add new success button with id "suggestion" named "✉️ New Suggestion" to components of the row builder
				add {_row} to rows of the message

				make embed:
					set title of embed to {@SuggestionsEmbedTitle}
					set description of embed to {@SuggestionsEmbedDescription}
					set footer of embed to {@SuggestionsEmbedFooter}
					set embed color of embed to yellow
				add last embed to the embeds of the message
			reply with {_msg}
		else:
			reply with "You cannot do this!"
			stop

on button click seen by "SuggestionsBot":
	if discord id of event-button is "suggestion":
		set {_modal} to new modal with id "suggestion-menu" named "Create New Suggestion"

		make new component row and store it in {_suggestionType}:
			set {_component} to new short text input with id "suggestion-type" named "What type of suggestion is this?"
			set placeholder of {_component} to "QoL Fix, Feature Request, Prize, etc."
			set required state of {_component} to true # maybe something else here, i don't found it clear
			add {_component} to components of the row builder
		add {_suggestionType} to rows of {_modal}

		make new component row and store it in {_suggestionText}:
			set {_component} to new short text input with id "suggestion-text" named "What's your suggestion?"
			set placeholder of {_component} to "I would like there to be a new..."
			set required state of {_component} to true # maybe something else here, i don't found it clear
			add {_component} to components of the row builder
		add {_suggestionText} to rows of {_modal}
        
		# event-user is not needed here, it only require the interaction event.
		# opening a modal will defer the interaction too
		show {_modal} to the user

on modal click seen by "SuggestionsBot":
	if event-string is "suggestion-menu":
		set {_val1} to value of textinput with id "suggestion-type"
		set {_val2} to value of textinput with id "suggestion-text"
			
		add 1 to {suggestioncount}
			
		set {_auth} to discord id of event-user

		create a new message and store it in {_msg}:
		
			make embed:
				set title of embed to "✉️ New Suggestion"
				add inline field named "Type of Suggestion" with value "%{_val1}%" to fields of embed
				add inline field named "Suggestion" with value "%{_val2}%" to fields of embed
				set footer of embed to "%event-user%"
				set timestamp of embed to now
			add last embed to the embeds of the message

		post {_msg} to text channel with id "{@SuggestionsChannel}" and store it in {_reaction}

		react to {_reaction} with reaction "white_check_mark"
		react to {_reaction} with reaction "x"
        
		delete {suggestion::%discord id of event-user%}
		delete {suggestion1::%discord id of event-user%}
			
		defer the interaction














